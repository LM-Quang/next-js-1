import { dummyMeals } from "@/data/meals";
import { Meal } from "@/type/Meal";
import slugify from "slugify";
import xss from "xss";
import { createWriteStream } from "node:fs";

export const getMeals = async () => {
   // To simulate API calling time
   await new Promise((resolve) => setTimeout(resolve, 1000));
   return dummyMeals;
};

export const getMealsError = async () => {
   await new Promise((resolve) => setTimeout(resolve, 1000));
   // To simulate Error
   throw new Error("Simulate error happens during calling API");
};

export const getMeal = (slug: string) => {
   // Perform API call here
   // Note: Remember to handle SQL Injection
   // Example: in SQL Lite
   // db.prepare(`SELECT * FROM meals WHERE slug = ${slug}`) => This is NOT ok
   // db.prepare('SELECT * FROM meals WHERE slug = ?').get(slug) => This is ok
   const index = dummyMeals.findIndex((meal) => meal.slug === slug);
   return index === -1 ? null : dummyMeals[index];
};

export const saveMeal = async (meal: Meal, imageFile: File) => {
   // id should be generated by DB
   meal.id = dummyMeals.length;

   // lower:true => convert to Lower case
   meal.slug = slugify(meal.title, { lower: true });

   // To prevent XSS attack
   meal.instructions = xss(meal.instructions);

   // Get image extension
   const extension = imageFile.name.split(".").pop();

   // Create fileName Image to store in Folder: asset/images
   const fileName = `${meal.slug}.${extension}`;

   // Store the actual image in Folder, not in DB
   const stream = createWriteStream(`public/images/${fileName}`);
   const bufferedImage = await imageFile.arrayBuffer();
   stream.write(Buffer.from(bufferedImage), (error) => {
      if (error) {
         throw new Error("Saving image failed!");
      }
   });

   // Update image to this
   meal.image = `/images/${fileName}`;

   await new Promise((resolve) => setTimeout(resolve, 1000));
   // Call API to Save this meal to DB
   // dummyMeals.push(meal);
};
